<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://vkayr.github.io/</id>
    <title>Kayr</title>
    <updated>2020-02-04T03:48:39.742Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://vkayr.github.io/"/>
    <link rel="self" href="https://vkayr.github.io/atom.xml"/>
    <logo>https://vkayr.github.io/images/avatar.png</logo>
    <icon>https://vkayr.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Kayr</rights>
    <entry>
        <title type="html"><![CDATA[Mybatis03--多表查询]]></title>
        <id>https://vkayr.github.io/post/dvQzEktx2</id>
        <link href="https://vkayr.github.io/post/dvQzEktx2">
        </link>
        <updated>2020-01-25T11:23:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="分类举例">分类+举例</h1>
<p>一对多<br>
多对一<br>
一对一<br>
多对多</p>
<p>特例：</p>
<p>如果拿出每一个订单，他都只能属于一个用户。所以Mybatis就把多对一看成了一对一。</p>
<h1 id="一对一">一对一</h1>
<p>一个账户对应一个用户</p>
<h2 id="查询所有账户并返回用户名地址">查询所有账户并返回用户名地址</h2>
<p>最简单的方法是定义专门的po类(定义了查询的所有字段)</p>
<ol>
<li>新建一个AccountUser类，继承Account类</li>
</ol>
<pre><code class="language-java">public class AccountUser extends Account {
    private String username;
    private String address;

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Override
    public String toString() {
        return super.toString() + &quot;     AccountUser{&quot; +
                &quot;username='&quot; + username + '\'' +
                &quot;, address='&quot; + address + '\'' +
                '}';
    }
}
</code></pre>
<ol start="2">
<li>定义账户持久层接口IAccountDao.java</li>
</ol>
<pre><code class="language-java">public interface IAccountDao {

    /**
     * 查询所有账户，并且带有用户名和地址
     * @return
     */
    List&lt;AccountUser&gt; findAllAccount();
}
</code></pre>
<ol start="3">
<li>定义IAccountDao.xml查询配置信息</li>
</ol>
<pre><code class="language-xml">    &lt;!--配置查询查询所有账户，并返回用户名地址--&gt;
    &lt;select id=&quot;findAllAccount&quot; resultType=&quot;AccountUser&quot;&gt;
        select a.*,u.username,u.address from account	a,user u where a.UID = u.id
    &lt;/select&gt;
</code></pre>
<ol start="4">
<li>创建AccountTest测试类</li>
</ol>
<pre><code class="language-java">public class AccountTest {
    private InputStream in;
    private SqlSession session;
    private IAccountDao accountDao;

    @Before
    public void init() throws Exception{
        in = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);
        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);
        session = factory.openSession();
        accountDao = session.getMapper(IAccountDao.class);
    }

    @After
    public void destory() throws IOException {
        session.commit();
        session.close();
        in.close();
    }


    /**
     * 测试查询所有账户并返回用户名和地址
     */
    @Test
    public void findAllAccountTest() throws IOException {
        List&lt;AccountUser&gt; aus = accountDao.findAllAccount();
        for (AccountUser au : aus) {
            System.out.println(au);
        }

    }
}
</code></pre>
<p>查询结果<br>
<img src="https://vkayr.github.io//post-images/1580615232062.png" alt="查询结果" loading="lazy"></p>
<h2 id="查询所有账户并返回所属用户所有信息">查询所有账户并返回所属用户所有信息</h2>
<ol>
<li>修改Account实体类</li>
</ol>
<p>account实体类中建立与user的联系</p>
<pre><code class="language-java">public class Account implements Serializable {
    private int id;
    private int uid;
    private double money;

    //从表实体应该包含一个主表实体的对象引用
    private User user;

    //以及各自对应的get,set,toString方法
}
</code></pre>
<ol start="2">
<li>修改IAccountDao.xml中查询配置信息</li>
</ol>
<p>使用resultMap来映射一对一的查询结果，其中使用association标签表明一对一关系映射，用于封装user</p>
<pre><code class="language-xml">&lt;resultMap id=&quot;AccountUserMap&quot; type=&quot;account&quot;&gt;
        &lt;id column=&quot;aid&quot; property=&quot;id&quot;/&gt;
        &lt;result column=&quot;uid&quot; property=&quot;uid&quot;/&gt;
        &lt;result column=&quot;money&quot; property=&quot;money&quot;/&gt;
        &lt;!-- 一对一的关系映射：配置封装user的内容--&gt;
        &lt;association property=&quot;user&quot;  column=&quot;uid&quot; javaType=&quot;user&quot;&gt;
            &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;
            &lt;result column=&quot;username&quot; property=&quot;username&quot;/&gt;
            &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;/&gt;
            &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;
            &lt;result column=&quot;address&quot; property=&quot;address&quot;/&gt;
        &lt;/association&gt;
&lt;/resultMap&gt;

&lt;!--配置查询所有--&gt;
&lt;select id=&quot;findAll&quot; resultType=&quot;Account&quot; resultMap=&quot;AccountMap&quot;&gt;
    select a.id as aid,a.UID,a.MONEY,u.* from account a,user u where a.UID = u.id
&lt;/select&gt;
</code></pre>
<ol start="3">
<li>编写测试方法</li>
</ol>
<pre><code class="language-java">    /**
    * 测试查询所有账户并返回对应用户信息
    */
@Test
public void findAllTest() throws IOException {
    List&lt;Account&gt; accounts = accountDao.findAll();
    for (Account account : accounts) {
        System.out.println(&quot;--------每个account的信息------------&quot;);
        System.out.println(account);
        System.out.println(account.getUser());
    }
}
</code></pre>
<p>查询结果<br>
<img src="https://vkayr.github.io//post-images/1580634731604.png" alt="" loading="lazy"></p>
<h1 id="一对多">一对多</h1>
<h2 id="查询用户信息以及关联账户信息">查询用户信息以及关联账户信息</h2>
<p>一个用户对应多个账户</p>
<p>需求：查询所有用户信息，同时查询出关联的账户信息</p>
<ol>
<li>编写SQL语句</li>
</ol>
<pre><code class="language-sql">SELECT * FROM USER u LEFT JOIN account a ON u.id=a.UID
</code></pre>
<p>查询结果</p>
<pre><code class="language-sql">+----+----------+---------------------+-----+---------+------+------+-------+
| id | username | birthday            | sex | address | ID   | UID  | MONEY |
+----+----------+---------------------+-----+---------+------+------+-------+
| 46 | 老王     | 2018-03-07 17:37:26 | 男  | 北京    |    1 |   46 |  1000 |
| 45 | 小张     | 2018-03-04 12:04:06 | 男  | 上海    |    2 |   45 |  1000 |
| 46 | 老王     | 2018-03-07 17:37:26 | 男  | 北京    |    3 |   46 |  2000 |
| 41 | 老王     | 2018-02-27 17:47:08 | 男  | 北京    | NULL | NULL | NULL  |
| 42 | 小二王   | 2018-03-02 15:09:37 | 女  | 上海    | NULL | NULL | NULL  |
| 43 | 小二王   | 2018-03-04 11:34:34 | 女  | 广州    | NULL | NULL | NULL  |
| 48 | 张三     | 2018-03-08 11:44:00 | 女  | 广州    | NULL | NULL | NULL  |
+----+----------+---------------------+-----+---------+------+------+-------+
</code></pre>
<ol start="2">
<li>修改User实体类</li>
</ol>
<p>user类中关联account集合，主表实体包含从表实体的集合引用</p>
<pre><code class="language-java">public class User implements Serializable {
    private Integer id;
    private String username;
    private Date birthday;
    private String sex;
    private String address;

    //一对多关系映射：主表实体应该包含从表实体的集合引用
    private List&lt;Account&gt; accounts;

    //以及各自的get,set,toString方法
}
</code></pre>
<ol start="3">
<li>持久层接口IUserDao添加查询方法</li>
</ol>
<pre><code class="language-java">public interface IUserDao {
    /**
     * 查询所有用户，同时获取出每个用户下的所有账户信息
     * @return
     */
    List&lt;User&gt; findAll();
}
</code></pre>
<ol start="4">
<li>映射配置信息IUserDao.xml</li>
</ol>
<pre><code class="language-xml">&lt;resultMap id=&quot;userAccountMap&quot; type=&quot;user&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;
        &lt;result property=&quot;birthday&quot; column=&quot;birthday&quot;/&gt;
        &lt;result property=&quot;sex&quot; column=&quot;sex&quot;/&gt;
        &lt;result property=&quot;address&quot; column=&quot;address&quot;/&gt;
        &lt;!--配置user对象中accounts集合的映射--&gt;
        &lt;collection property=&quot;accounts&quot; ofType=&quot;account&quot;&gt;
            &lt;id column=&quot;aid&quot; property=&quot;id&quot;/&gt;
            &lt;result column=&quot;uid&quot; property=&quot;uid&quot;/&gt;
            &lt;result column=&quot;money&quot; property=&quot;money&quot;/&gt;
        &lt;/collection&gt;
    &lt;/resultMap&gt;

    &lt;select id=&quot;findAll&quot; resultMap=&quot;userAccountMap&quot;&gt;
        SELECT u.*,a.ID AS aid,a.UID,a.MONEY FROM USER u LEFT JOIN account a ON u.id=a.UID
    &lt;/select&gt;
</code></pre>
<pre><code>5. 编写测试方法
</code></pre>
<pre><code class="language-java">    @Test
    public void findAllTest() throws IOException {
        List&lt;User&gt; users = userDao.findAll();
        for (User user : users) {
            System.out.println(&quot;-----每个用户的信息------&quot;);
            System.out.println(user);
            System.out.println(user.getAccounts());
        }
    }
</code></pre>
<p>查询结果</p>
<figure data-type="image" tabindex="1"><img src="https://vkayr.github.io//post-images/1580650143666.png" alt="" loading="lazy"></figure>
<h1 id="多对多">多对多</h1>
<p>多对多可以看成双向的一对多关系</p>
<h2 id="role到user的多对多">Role到User的多对多</h2>
<ol>
<li>用户与角色的关系模型</li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://vkayr.github.io//post-images/1580786240267.png" alt="" loading="lazy"></figure>
<ol start="2">
<li>编写SQL语句</li>
</ol>
<pre><code class="language-sql">SELECT
	r.ID rid,
	r.ROLE_NAME,
	r.ROLE_DESC,
	u.* 
FROM
	role r
	LEFT JOIN user_role ur ON r.id = ur.RID
	LEFT JOIN USER u ON uid = u.id
</code></pre>
<p>查询结果</p>
<pre><code class="language-sql">+-----+-----------+--------------+------+----------+---------------------+------+---------+
| rid | ROLE_NAME | ROLE_DESC    | id   | username | birthday            | sex  | address |
+-----+-----------+--------------+------+----------+---------------------+------+---------+
|   1 | 院长      | 管理整个学院 |   41 | 老王     | 2018-02-27 17:47:08 | 男   | 北京    |
|   1 | 院长      | 管理整个学院 |   45 | 小张     | 2018-03-04 12:04:06 | 男   | 上海    |
|   2 | 总裁      | 管理整个公司 |   41 | 老王     | 2018-02-27 17:47:08 | 男   | 北京    |
|   3 | 校长      | 管理整个学校 | NULL | NULL     | NULL                | NULL | NULL    |
+-----+-----------+--------------+------+----------+---------------------+------+---------+
</code></pre>
<ol start="3">
<li>编写角色实体类</li>
</ol>
<pre><code class="language-java">public class Role implements Serializable {
    private int roleId;
    private String roleName;
    private String roleDesc;

    //多对多的关系映射：一个角色可以赋予多个用户
    private List&lt;User&gt; users;

    //以及各自的get,set方法和toString
}
</code></pre>
<ol start="4">
<li>编写持久层接口</li>
</ol>
<pre><code class="language-java">public interface IUserDao {
    /**
     * 查询所有角色，同时获取对应的用户信息
     * @return
     */
    List&lt;User&gt; findAll();
}
</code></pre>
<ol start="5">
<li>编写映射配置文件</li>
</ol>
<pre><code class="language-xml">&lt;resultMap id=&quot;roleMap&quot; type=&quot;role&quot;&gt;
        &lt;id property=&quot;roleId&quot; column=&quot;rid&quot;/&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot;/&gt;
        &lt;result property=&quot;roleDesc&quot; column=&quot;role_desc&quot;/&gt;
        &lt;!--配置role对象中user集合的映射--&gt;
        &lt;collection property=&quot;users&quot; ofType=&quot;user&quot;&gt;
            &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;
            &lt;result column=&quot;username&quot; property=&quot;username&quot;/&gt;
            &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;/&gt;
            &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;
            &lt;result column=&quot;address&quot; property=&quot;address&quot;/&gt;
        &lt;/collection&gt;
    &lt;/resultMap&gt;

    &lt;select id=&quot;findAll&quot; resultMap=&quot;roleMap&quot;&gt;
        SELECT r.ID rid,r.ROLE_NAME,r.ROLE_DESC,u.* from role r
         left join user_role ur on r.id = ur.RID
         left join user u on uid = u.id
    &lt;/select&gt;
</code></pre>
<ol start="6">
<li>编写测试类</li>
</ol>
<pre><code class="language-java">    @Test
    public void findAllTest() throws IOException {
        List&lt;Role&gt; roles = roleDao.findAll();
        for (Role role : roles) {
            System.out.println(&quot;--------每个角色的信息------------&quot;);
            System.out.println(role);
            System.out.println(role.getUsers());
        }
    }
</code></pre>
<p>查询结果</p>
<figure data-type="image" tabindex="3"><img src="https://vkayr.github.io//post-images/1580786671183.png" alt="" loading="lazy"></figure>
<h2 id="user到role的多对多">User到Role的多对多</h2>
<ol>
<li>编写SQL语句</li>
</ol>
<pre><code class="language-sql">SELECT
	u.*,
	r.ID rid,
	r.role_name,
	r.role_desc 
FROM
	USER u
	LEFT JOIN user_role ur ON id = ur.UID
	LEFT JOIN role r ON rid = r.ID
</code></pre>
<p>查询结果</p>
<pre><code class="language-sql">+----+----------+---------------------+-----+---------+------+-----------+--------------+
| id | username | birthday            | sex | address | rid  | role_name | role_desc    |
+----+----------+---------------------+-----+---------+------+-----------+--------------+
| 41 | 老王     | 2018-02-27 17:47:08 | 男  | 北京    |    1 | 院长      | 管理整个学院 |
| 45 | 小张     | 2018-03-04 12:04:06 | 男  | 上海    |    1 | 院长      | 管理整个学院 |
| 41 | 老王     | 2018-02-27 17:47:08 | 男  | 北京    |    2 | 总裁      | 管理整个公司 |
| 42 | 小二王   | 2018-03-02 15:09:37 | 女  | 上海    | NULL | NULL      | NULL         |
| 43 | 小二王   | 2018-03-04 11:34:34 | 女  | 广州    | NULL | NULL      | NULL         |
| 46 | 老王     | 2018-03-07 17:37:26 | 男  | 北京    | NULL | NULL      | NULL         |
| 48 | 张三     | 2018-03-08 11:44:00 | 女  | 广州    | NULL | NULL      | NULL         |
+----+----------+---------------------+-----+---------+------+-----------+--------------+
</code></pre>
<ol start="2">
<li>修改User实体类</li>
</ol>
<pre><code class="language-java">public class User implements Serializable {
    private Integer id;
    private String username;
    private Date birthday;
    private String sex;
    private String address;

    //多对多的关系映射：一个用户可以具备多个角色
    private List&lt;Role&gt; roles;

    //以及各自的get,set方法和toString方法
}
</code></pre>
<ol start="3">
<li>编写User持久层接口</li>
</ol>
<pre><code class="language-java">public interface IUserDao {
    /**
     * 查询所有用户，同时获取对应的角色信息
     * @return
     */
    List&lt;User&gt; findAll();
}
</code></pre>
<ol start="4">
<li>编写映射文件配置信息</li>
</ol>
<pre><code class="language-xml">    &lt;resultMap id=&quot;userMap&quot; type=&quot;user&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;
        &lt;result property=&quot;birthday&quot; column=&quot;birthday&quot;/&gt;
        &lt;result property=&quot;sex&quot; column=&quot;sex&quot;/&gt;
        &lt;result property=&quot;address&quot; column=&quot;address&quot;/&gt;
        &lt;!--配置user对象中role集合的映射--&gt;
        &lt;collection property=&quot;roles&quot; ofType=&quot;role&quot;&gt;
            &lt;id column=&quot;rid&quot; property=&quot;roleId&quot;/&gt;
            &lt;result column=&quot;role_name&quot; property=&quot;roleName&quot;/&gt;
            &lt;result column=&quot;role_desc&quot; property=&quot;roleDesc&quot;/&gt;
        &lt;/collection&gt;
    &lt;/resultMap&gt;

    &lt;select id=&quot;findAll&quot; resultMap=&quot;userMap&quot;&gt;
        SELECT u.*,r.ID rid,r.role_name,r.role_desc FROM user u
         LEFT JOIN user_role ur on id = ur.UID
         left join role r on rid = r.ID;
    &lt;/select&gt;
</code></pre>
<pre><code>5. 编写测试类
</code></pre>
<pre><code class="language-java">        @Test
    public void findAllTest() throws IOException {
        List&lt;User&gt; users = userDao.findAll();
        for (User user : users) {
            System.out.println(&quot;-----每个用户的信息------&quot;);
            System.out.println(user);
            System.out.println(user.getRoles());
        }
    }
</code></pre>
<p>查询结果</p>
<figure data-type="image" tabindex="4"><img src="https://vkayr.github.io//post-images/1580787806720.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mybatis01--介绍与快速入门]]></title>
        <id>https://vkayr.github.io/post/2IXgot2ol</id>
        <link href="https://vkayr.github.io/post/2IXgot2ol">
        </link>
        <updated>2020-01-20T04:27:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="jdbc问题分析">JDBC问题分析</h2>
<pre><code class="language-java">public static void main(String[] args) {
        String url = &quot;&quot;;
        String username = &quot;&quot;;
        String password = &quot;&quot;;

        Connection con = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try {
            //加载驱动
            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
            //创建连接
            con = DriverManager.getConnection(url,username,password);
            //执行sql
            String sql = &quot;select * from user where username = ?&quot;;
            preparedStatement = con.prepareStatement(sql);
            preparedStatement.setString(1,&quot;Snow&quot;);
            resultSet = preparedStatement.executeQuery();
            //处理结果集
            while (resultSet.next()){
                System.out.println(resultSet.getString(&quot;id&quot;)+&quot;---&quot;+
                        resultSet.getString(&quot;username&quot;));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            //释放资源
            if(resultSet!=null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(preparedStatement!=null){
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(con!=null){
                try {
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
</code></pre>
<ul>
<li>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。</li>
<li>Sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。</li>
<li>使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。</li>
<li>对结果集解析存在硬编码（查询列名），sql变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成pojo对象解析比较方便。</li>
</ul>
<h2 id="框架概述">框架概述</h2>
<p>mybatis是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p>
<p>mybatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。</p>
<p>采用ORM思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节，使我们不用与jdbc api打交道，就可以完成对数据库的持久化操作。</p>
<h2 id="快速入门">快速入门</h2>
<h3 id="创建maven工程">创建Maven工程</h3>
<p>新建Maven工程，工程信息如下<br>
GroupId : com.kayr<br>
ArtifactId : day01_Mybatis<br>
Version : 1.0-SNAPSHOT</p>
<p>项目结构<br>
<img src="https://vkayr.github.io//post-images/1579947501155.png" alt="" loading="lazy"></p>
<h3 id="添加mybatis坐标">添加Mybatis坐标</h3>
<pre><code class="language-xml">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.4.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.48&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j&lt;/artifactId&gt;
        &lt;version&gt;1.2.17&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<h3 id="编写实体类">编写实体类</h3>
<pre><code class="language-java">public class User implements Serializable {
    private Integer id;
    private String username;
    private Date birthday;
    private String sex;
    private String address;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public Date getBirthday() {
        return birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username='&quot; + username + '\'' +
                &quot;, birthday=&quot; + birthday +
                &quot;, sex='&quot; + sex + '\'' +
                &quot;, address='&quot; + address + '\'' +
                '}';
    }
}
</code></pre>
<h3 id="编写持久层接口iuserdao">编写持久层接口IUserDao</h3>
<pre><code class="language-java">public interface IUserDao {
    /**
     * 查询所有用户
     * @return
     */
    List&lt;User&gt; findAll();
}
</code></pre>
<h3 id="编写持久层接口映射iuserdaoxml">编写持久层接口映射IUserDao.xml</h3>
<p>创建位置：必须和持久层接口在相同的包<br>
命名：必须以持久层接口名称命名文件，扩展名为<code>.xml</code></p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.kayr.dao.IUserDao&quot;&gt;
    &lt;select id=&quot;findAll&quot; resultType=&quot;com.kayr.domain.User&quot;&gt;
        select * from user
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<h3 id="编写salmapconfigxml配置文件">编写SalMapConfig.xml配置文件</h3>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--配置mybatis的环境--&gt;
    &lt;environments default=&quot;mysql&quot;&gt;
        &lt;!--配置mysql环境--&gt;
        &lt;environment id=&quot;mysql&quot;&gt;
            &lt;!--配置事务类型--&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;!--配置连接数据库信息，使用的是连接池（数据源）--&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;

    &lt;!--告知mybatis映射配置文件位置--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/kayr/dao/IUserDao.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h3 id="编写测试方法">编写测试方法</h3>
<pre><code class="language-java">public class MybatisTest {
    public static void main(String[] args) throws IOException {
        //1.读取配置文件
        InputStream in = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);
        //2.创建SqlSessionFactory的构建者对象
        SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();
        //3.使用构建者创建工厂对象SqlSessionFactory
        SqlSessionFactory factory = builder.build(in);
        //4.使用SqlSessionFactory工厂生产SqlSession
        SqlSession session = factory.openSession();
        //5.使用SqlSession创建dao接口代理对象
        IUserDao userdao = session.getMapper(IUserDao.class);
        //6.执行查询所有方法
        List&lt;User&gt; Users = userdao.findAll();
        for (User user : Users) {
            System.out.println(user);
        }
        //7.释放资源
        session.close();
        in.close();
    }
}
</code></pre>
<h3 id="使用注解方式配置">使用注解方式配置</h3>
<ul>
<li>在持久层接口中添加注解</li>
</ul>
<pre><code class="language-java">public interface IUserDao {
    /**
     * 查询所有用户
     * @return
     */
    @Select(&quot;select * from user&quot;)
    List&lt;User&gt; findAll();
}
</code></pre>
<ul>
<li>修改SqlMapConfig.xml<br>
mapper标签中将resourse属性改为class，值为持久层接口全限定名</li>
</ul>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--配置mybatis的环境--&gt;
    &lt;environments default=&quot;mysql&quot;&gt;
        &lt;!--配置mysql环境--&gt;
        &lt;environment id=&quot;mysql&quot;&gt;
            &lt;!--配置事务类型--&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;!--配置连接数据库信息，使用的是连接池（数据源）--&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;

    &lt;!--告知mybatis映射配置文件位置--&gt;
    &lt;mappers&gt;
        &lt;mapper class=&quot;com.kayr.dao.IUserDao&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<ul>
<li>注意事项</li>
</ul>
<p>使用注解配置时，需移除xml的映射配置(IUserDao.xml)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://vkayr.github.io/post/about</id>
        <link href="https://vkayr.github.io/post/about">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<p>这是关于的页面，可以在这里向世界介绍你！</p>
]]></content>
    </entry>
</feed>